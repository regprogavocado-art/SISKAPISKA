version: '2.2'

services:
  # Frontend - Авогуру 7.3 UI адаптированный под СИСКАПИСКА
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: siskapiska-frontend
    ports:
      - "8080:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://backend:3001
      - REACT_APP_AI_URL=http://ai-service:5000
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - siskapiska-network

  # Backend API - Node.js сервер
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: siskapiska-backend
    ports:
      - "3000:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
      - ISPMANAGER_URL=${ISPMANAGER_URL}
      - ISPMANAGER_USER=${ISPMANAGER_USER}
      - ISPMANAGER_PASSWORD=${ISPMANAGER_PASSWORD}
      - GODADDY_API_KEY=${GODADDY_API_KEY}
      - GODADDY_API_SECRET=${GODADDY_API_SECRET}
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    networks:
      - siskapiska-network

  # AI Service - Python модуль для ИИ интеграции
  ai-service:
    build:
      context: ./ai-integration
      dockerfile: Dockerfile
    container_name: siskapiska-ai
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - postgres
    restart: unless-stopped
    volumes:
      - ./ai-integration/models:/app/models
      - ./logs:/app/logs
    networks:
      - siskapiska-network

  # Domain Automation Service
  domain-service:
    build:
      context: ./domain-automation
      dockerfile: Dockerfile
    container_name: siskapiska-domains
    environment:
      - GODADDY_API_KEY=${GODADDY_API_KEY}
      - GODADDY_API_SECRET=${GODADDY_API_SECRET}
      - NAMECHEAP_API_USER=${NAMECHEAP_API_USER}
      - NAMECHEAP_API_KEY=${NAMECHEAP_API_KEY}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - postgres
    restart: unless-stopped
    volumes:
      - ./domain-automation/data:/app/data
      - ./logs:/app/logs
    networks:
      - siskapiska-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: siskapiska-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=ru_RU.UTF-8 --lc-ctype=ru_RU.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - siskapiska-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: siskapiska-redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - siskapiska-network

  # Content Generator Service
  content-generator:
    build:
      context: ./content-generator
      dockerfile: Dockerfile
    container_name: siskapiska-content
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - postgres
      - ai-service
    restart: unless-stopped
    volumes:
      - ./content-generator/templates:/app/templates
      - ./logs:/app/logs
    networks:
      - siskapiska-network

  # Web Scraping Service
  scraper-service:
    build:
      context: ./scraping-automation
      dockerfile: Dockerfile
    container_name: siskapiska-scraper
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PROXY_LIST_URL=http://www.freeproxylists.net/
    depends_on:
      - postgres
    restart: unless-stopped
    volumes:
      - ./scraping-automation/data:/app/data
      - ./logs:/app/logs
    networks:
      - siskapiska-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: siskapiska-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - siskapiska-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: siskapiska-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - siskapiska-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: siskapiska-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - siskapiska-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  siskapiska-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16